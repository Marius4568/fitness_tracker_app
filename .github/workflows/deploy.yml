name: Deploy Fitness Tracker

# Trigger this workflow on push to master branch
on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and push backend Docker image
      - name: Build and push backend image
        working-directory: ./fitness-tracker-backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fitness-tracker-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/fitness-tracker-backend:latest

      # Step 4: Build and push frontend Docker image  
      - name: Build and push frontend image
        working-directory: ./fitness-tracker-frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fitness-tracker-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/fitness-tracker-frontend:latest

      # Step 5: Deploy to EC2 instance
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Save SSH key to file
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # SSH into EC2 and update the application
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << 'EOF'
            cd /home/ubuntu/fitness-tracker
            
            # Pull latest code from GitHub
            git pull origin master
            
            # Pull latest Docker images
            docker-compose pull
            
            # Restart only app containers, not database
            docker-compose up -d --no-deps --build backend frontend
            
            # Show running containers
            docker ps
          EOF
          
          # Clean up SSH key
          rm -f private_key.pem

      # Step 6: Verify deployment
      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Application should be accessible at: http://${{ secrets.EC2_HOST }}"